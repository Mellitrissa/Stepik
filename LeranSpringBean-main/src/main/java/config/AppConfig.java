package config;

import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
/*
* @Configuration - это аннотация в Spring Framework, которая используется для обозначения класса,
* который выполняет роль конфигурационного класса, в котором определены бины, необходимые для работы приложения.
*
* В классе, помеченном аннотацией @Configuration, могут быть определены бины (классы, объекты, интерфейсы и т.д.),
* которые можно инжектить в другие классы приложения. Конфигурационный класс может использовать другие аннотации Spring,
* такие как @Bean, @ComponentScan, @Import, @Profile и т.д., чтобы настроить приложение.
*
* Когда приложение запускается, Spring Framework использует конфигурационный класс,
* помеченный аннотацией @Configuration, для создания бинов, которые будут использоваться в приложении.
*
* @ComponentScan - это аннотация в Spring Framework,
* которая указывает на то, что Spring должен сканировать определенный пакет (или пакеты) в поисках классов,
* которые следует рассматривать как компоненты. Компоненты могут быть обычными классами,
* помеченными аннотациями @Component, @Service, @Repository, @Controller, или любыми другими аннотациями,
* маркирующими классы, как Spring-компоненты.
* @ComponentScan можно использовать в классе конфигурации Spring для автоматической настройки компонентов в приложении.
* Если @ComponentScan не указана в классе конфигурации, Spring будет сканировать только текущий пакет.
* Если @ComponentScan указана, то Spring будет сканировать заданные пакеты и искать классы,
* которые могут быть использованы как компоненты, управляемые Spring.
*
* */
@Configuration
@ComponentScan(basePackages = "modules")
public class AppConfig {
}
